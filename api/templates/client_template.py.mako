# -*- coding: utf-8 -*-
# Copyright (C) 2012-2023 Mujin, Inc.

# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import zmq
import typing
import time
from . import json
from . import ${parentClassFile}Error

from mujinplanningclient import zmqclient

import logging
log = logging.getLogger(__name__)

class VisionClient(object):
    """Mujin vision client for the ${clientTaskName} task"""
    ${extraClassAttributes}

    def __init__(
        self,
        ${extraConstructorArgs}hostname='',
        commandport=7004,
        ctx=None,
        checkpreemptfn=None,
        reconnectionTimeout=40,
        callerid=None,
        author=None,
        **ignoredArgs  # Additional keyword args are not used, but allowed for easy initialization from a dictionary
    ):
        """Connects to the vision server, initializes vision server, and sets up parameters

        Args:
            ${extraConstructorArgsDocstringLines}hostname (str, optional): e.g. visioncontroller1
            commandport (int, optional): e.g. 7004
            ctx (zmq.Context, optional): The ZMQ context
            checkpreemptfn (Callable, optional): Called periodically when in a loop. A function handle to preempt the socket. The function should raise an exception if a preempt is desired.
            reconnectionTimeout (float, optional): Sets the "timeout" parameter of the ZmqSocketPool instance
            callerid (str, optional): The callerid to send to vision.
        """
        self.hostname = hostname
        self.commandport = commandport
        self.configurationport = commandport + 2,
        self.statusport = commandport + 3,
        self._callerid = callerid,
        
        if ctx is None:
            assert(self._ctxown is None)
            self._ctxown = zmq.Context()
            self._ctxown.linger = 100
            self._ctx = self._ctxown
        else:
            self._ctx = ctx
        
        self._commandsocket = zmqclient.ZmqClient(self.hostname, commandport, ctx=self._ctx, limit=3, checkpreemptfn=checkpreemptfn, reusetimeout=reconnectionTimeout)
        self._configurationsocket = zmqclient.ZmqClient(self.hostname, self.configurationport, ctx=self._ctx, limit=3, checkpreemptfn=checkpreemptfn, reusetimeout=reconnectionTimeout)
        self._isok = True
        
    ${extraClientStaticFunctions}
    #
    # Generated commands
    #

${clientContent}
    ${extraClientContent}