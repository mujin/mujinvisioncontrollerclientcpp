template: 'templates/client_template.cpp.mako'
clientType: mujinvision
outputFilePath: ../src/visioncontrollerclient.cpp
generatorSettingsComponents:
  timeout:
    type: number
    x-nonPayloadParamOrder: 0  # Used only inside the client, not sent to the server
    x-inSendAndReceive: true
include:
- components.yaml
x-specModifications:
  services:
    # GetPublishedState:
    #   TODO_CONFIRM_BACKEND: ''
    GetPublishedStateService:
      TODO_CONFIRM_BACKEND: ''
      parameters:
        timeout:
            $merge: '#/generatorSettingsComponents/timeout'
    Ping:
      TODO_CONFIRM_BACKEND: ''
      parameters:
        timeout:
            paramOrderingIndex: 0
            $merge: '#/generatorSettingsComponents/timeout'
    SetLogLevel:
      TODO_CONFIRM_BACKEND: ''
      parameters:
        componentLevels:
          paramOrderingIndex: 0
        timeout:
          paramOrderingIndex: 1
          $merge: '#/generatorSettingsComponents/timeout'
    Cancel:
      TODO_CONFIRM_BACKEND: ''
      parameters:
        timeout:
          $merge: '#/generatorSettingsComponents/timeout'
    Quit:
      TODO_CONFIRM_BACKEND: ''
      parameters:
        timeout:
          $merge: '#/generatorSettingsComponents/timeout'
    GetTaskStateService:
      TODO_CONFIRM_BACKEND: ''
      parameters:
        timeout:
          $merge: '#/generatorSettingsComponents/timeout'
    GetVisionStatistics:
      TODO_CONFIRM_BACKEND: ''
      parameters:
        timeout:
          $merge: '#/generatorSettingsComponents/timeout'
    GetLatestDetectedObjects:
      TODO_CONFIRM_BACKEND: ''
      parameters:
        timeout:
          $merge: '#/generatorSettingsComponents/timeout'
    GetLatestDetectionResultImages:
      TODO_CONFIRM_BACKEND: ''
      x-customSendAndReceive: |
        if (!blockwait) {
          _SendCommandJSON(_currentCommandSocket, value, *_rAlloc.get(), "BackupDetectionLog", static_cast<uint64_t>(timeout * 1000));
        } else {
          rapidjson::Value receivedResponse;
          SendAndReceiveCommand("BackupDetectionLog", value, receivedResponse, *_rAlloc.get(), timeout);
        }
      parameters:
        timeout:
          $merge: '#/generatorSettingsComponents/timeout'
        imageTypes:
          type: array
          items:
            type: 'uint8_t' #TODO(heman.gandhi): link against vision manager to get 'mujinvision::MujinImageType'
        blockwait:
          type: bool
          default: True
          x-nonPayloadParamOrder: 1
    GetDetectionHistory:
      TODO_CONFIRM_BACKEND: ''
      parameters:
        timeout:
          $merge: '#/generatorSettingsComponents/timeout'
    BackupDetectionLog:
      TODO_CONFIRM_BACKEND: ''
      x-customSendAndReceive: |
        if (fireandforget) {  // TODO(heman.gandhi): this behaves more like !blockwait. We need to figure out a way to just send a message and not care.
          _SendCommandJSON(_currentCommandSocket, value, *_rAlloc.get(), "BackupDetectionLog", static_cast<uint64_t>(timeout * 1000));
        } else {
          rapidjson::Value receivedResponse;
          SendAndReceiveCommand("BackupDetectionLog", value, receivedResponse, *_rAlloc.get(), timeout);
        }
      parameters:
        fireandforget:
          $merge: '#/components/Internal_ExecuteCommandParameters/fireandforget'
          x-nonPayloadParamOrder: 1  # Used only inside the client, not sent to the server
        timeout:
          $merge: '#/generatorSettingsComponents/timeout'
    StopTask:
      TODO_CONFIRM_BACKEND: ''
      x-customSendAndReceive: |
        if (fireandforget) {  // TODO(heman.gandhi): this behaves more like !blockwait. We need to figure out a way to just send a message and not care.
          _SendCommandJSON(_currentCommandSocket, value, *_rAlloc.get(), "StopTask", static_cast<uint64_t>(timeout * 1000));
        } else {
          rapidjson::Value receivedResponse;
          SendAndReceiveCommand("StopTask", value, receivedResponse, *_rAlloc.get(), timeout);
        }
      parameters:
        timeout:
          paramOrderingIndex: 7
          $merge: '#/generatorSettingsComponents/timeout'
        taskTypes:
          paramOrderingIndex: 2
        waitForStop:
          paramOrderingIndex: 4
        removeTask:
          paramOrderingIndex: 5
        taskId:
          paramOrderingIndex: 0
        taskType:
          paramOrderingIndex: 1
        fireandforget:
          x-nonPayloadParamOrder: 1  # Used only inside the client, not sent to the server
          $merge: '#/components/Internal_ExecuteCommandParameters/fireandforget'
          paramOrderingIndex: 6
        cycleIndex:
          paramOrderingIndex: 3
    ResumeTask:
      TODO_CONFIRM_BACKEND: ''
      x-customSendAndReceive: |
        if (fireandforget) {  // TODO(heman.gandhi): this behaves more like !blockwait. We need to figure out a way to just send a message and not care.
          _SendCommandJSON(_currentCommandSocket, value, *_rAlloc.get(), "ResumeTask", static_cast<uint64_t>(timeout * 1000));
        } else {
          rapidjson::Value receivedResponse;
          SendAndReceiveCommand("ResumeTask", value, receivedResponse, *_rAlloc.get(), timeout);
        }
      parameters:
        timeout:
          paramOrderingIndex: 6
          $merge: '#/generatorSettingsComponents/timeout'
        taskTypes:
          paramOrderingIndex: 2
        waitForStop:
          paramOrderingIndex: 4
        taskId:
          paramOrderingIndex: 0
        taskType:
          paramOrderingIndex: 1
        fireandforget:
          x-nonPayloadParamOrder: 1  # Used only inside the client, not sent to the server
          $merge: '#/components/Internal_ExecuteCommandParameters/fireandforget'
          paramOrderingIndex: 5
        cycleIndex:
          paramOrderingIndex: 3
    StartObjectDetectionTask:
      returns:
        dict:
          required: true
          description: Returns immediately once the call completes
      TODO_CONFIRM_BACKEND: ''
      parameters:
        systemState:
          paramOrderingIndex: 0
        timeout:
          paramOrderingIndex: 1
          $merge: '#/generatorSettingsComponents/timeout'
    StartContainerDetectionTask:
      returns:
        dict:
          required: true
          description: Returns immediately once the call completes
      TODO_CONFIRM_BACKEND: ''
      parameters:
        systemState:
          paramOrderingIndex: 0
        timeout:
          paramOrderingIndex: 1
          $merge: '#/generatorSettingsComponents/timeout'
    StartVisualizePointCloudTask:
      returns:
        dict:
          required: true
          description: Returns immediately once the call completes
      TODO_CONFIRM_BACKEND: ''
      parameters:
        systemState:
          paramOrderingIndex: 0
        timeout:
          paramOrderingIndex: 1
          $merge: '#/generatorSettingsComponents/timeout'